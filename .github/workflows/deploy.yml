name: 🚀 Deploy VitalFlow Automation

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Test Suite
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: 🧪 Run Python tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Node.js dependencies
      run: npm ci
      
    - name: 🧪 Run Node.js tests
      run: npm test

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: 🔍 Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: 🔍 Run npm audit
      run: |
        npm audit --audit-level moderate --json > npm-audit.json || true
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          npm-audit.json

  # Build and Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏗️ Build application
      run: |
        echo "Building VitalFlow Automation System..."
        python scripts/build.py
        
    - name: 🚀 Deploy to Staging
      env:
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        echo "Deploying to staging environment..."
        ./scripts/deploy.sh staging
        
    - name: 🧪 Run health check
      run: |
        python scripts/health_check.py --environment staging
        
    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, deploy-staging]
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏗️ Build application
      run: |
        echo "Building VitalFlow Automation System for production..."
        python scripts/build.py --production
        
    - name: 🚀 Deploy to Production
      env:
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        TIKTOK_ACCESS_TOKEN: ${{ secrets.TIKTOK_ACCESS_TOKEN }}
        SUPLIFUL_API_KEY: ${{ secrets.SUPLIFUL_API_KEY }}
      run: |
        echo "Deploying to production environment..."
        ./scripts/deploy.sh production
        
    - name: 🧪 Run production health check
      run: |
        python scripts/health_check.py --environment production
        
    - name: 📊 Run performance tests
      run: |
        python scripts/performance_test.py --environment production
        
    - name: 📢 Notify successful deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '🎉 VitalFlow Automation successfully deployed to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: 📢 Notify failed deployment
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: '❌ VitalFlow Automation deployment to production failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: failure()

  # Backup and Monitoring
  post-deployment:
    name: 📊 Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 💾 Create backup
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        python scripts/backup.py --environment production
        
    - name: 📊 Update monitoring
      run: |
        python scripts/update_monitoring.py --environment production
        
    - name: 📈 Generate deployment report
      run: |
        python scripts/deployment_report.py --environment production
        
    - name: 📊 Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          deployment-report.html
          backup-confirmation.json
          monitoring-config.json

